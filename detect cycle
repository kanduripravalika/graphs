from collections import defaultdict
class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adj_list = defaultdict(list)
    def add_edge(self, u, v):
        self.adj_list[u].append(v)
    def is_cyclic(self):
        visited = [False] * self.vertices
        recursion_stack = [False] * self.vertices
        for v in range(self.vertices):
            if not visited[v]:
                if self._is_cyclic_util(v, visited, recursion_stack):
                    return True
        return False
    def _is_cyclic_util(self, v, visited, recursion_stack):
        visited[v] = True
        recursion_stack[v] = True
        for neighbor in self.adj_list[v]:
            if not visited[neighbor]:
                if self._is_cyclic_util(neighbor, visited, recursion_stack):
                    return True
            elif recursion_stack[neighbor]:
                return True
        recursion_stack[v] = False
        return False
graph = Graph(4)
graph.add_edge(0, 1)
graph.add_edge(1, 2)
graph.add_edge(2, 3)
graph.add_edge(3, 1)
has_cycle = graph.is_cyclic()
if has_cycle:
    print("The graph contain a cycle")
else:
    print("The graph does not contain a cycle")

excepted output:

The graph contain a cycle
