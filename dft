from collections import defaultdict
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    def add_edge(self, u, v):
        self.graph[u].append(v)
    def dfs(self, start_vertex):
        visited = [False] * len(self.graph)
        self._dfs_recursive(start_vertex, visited)
    def _dfs_recursive(self, vertex, visited):
        visited[vertex] = True
        print(vertex, end=" ")
        for neighbor in self.graph[vertex]:
            if not visited[neighbor]:
                self._dfs_recursive(neighbor, visited)
graph = Graph()
graph.add_edge(0, 1)
graph.add_edge(0, 2)
graph.add_edge(1, 2)
graph.add_edge(2, 0)
graph.add_edge(2, 3)
graph.add_edge(3, 3)
start_vertex = 2
print("DFS Traversal:")
graph.dfs(start_vertex)


excepted output:

DFS Traversal:
2 0 1 3 
